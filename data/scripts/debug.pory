#if DEBUG_OVERWORLD_MENU == TRUE
script Debug_MessageEnd
{
	waitmessage
	waitbuttonpress
	releaseall
	end
}

script Debug_ShowFieldMessageStringVar4
{
	special(ShowFieldMessageStringVar4)
	goto(Debug_MessageEnd)
}

script Debug_CheatStart
{
	setflag(FLAG_SYS_POKEMON_GET)
	setflag(FLAG_RESCUED_BIRCH)
	setflag(FLAG_HIDE_ROUTE_101_BIRCH_ZIGZAGOON_BATTLE)
	setflag(FLAG_ADVENTURE_STARTED)
	clearflag(FLAG_HIDE_LITTLEROOT_TOWN_BIRCHS_LAB_BIRCH)
	setflag(FLAG_HIDE_ROUTE_101_BIRCH_STARTERS_BAG)
	setvar(VAR_BIRCH_LAB_STATE, 2)
	setvar(VAR_ROUTE101_STATE, 3)
	givemon(SPECIES_TREECKO, 20, ITEM_NONE)
	givemon(SPECIES_TORCHIC, 20, ITEM_NONE)
	givemon(SPECIES_MUDKIP, 20, ITEM_NONE)
	setflag(FLAG_SYS_POKEDEX_GET)
	special(SetUnlockedPokedexFlags)
	setflag(FLAG_RECEIVED_POKEDEX_FROM_BIRCH)
	setvar(VAR_CABLE_CLUB_TUTORIAL_STATE, 2)
	setflag(FLAG_SYS_NATIONAL_DEX)
	special(EnableNationalPokedex)
	setflag(FLAG_RECEIVED_RUNNING_SHOES)
	setflag(FLAG_SYS_B_DASH)
	setvar(VAR_LITTLEROOT_TOWN_STATE, 4 @ 4: Received Running Shoes)
	setvar(VAR_LITTLEROOT_INTRO_STATE, 7 @ 7: Told to go meet rival)
	setvar(VAR_LITTLEROOT_HOUSES_STATE_BRENDAN, 2 @ 2: Met Rival's Mom (and is corresponding gender))
	setvar(VAR_LITTLEROOT_HOUSES_STATE_MAY, 2 @ 2: Met Rival's Mom (and is corresponding gender))
	setvar(VAR_LITTLEROOT_RIVAL_STATE, 4 @ 4: Received Pokedex)
	setflag(FLAG_RECEIVED_BIKE)
	additem(ITEM_ACRO_BIKE)
	setvar(VAR_BRINEY_HOUSE_STATE, 1)
	setvar(VAR_ROUTE116_STATE, 2)
	setflag(FLAG_HIDE_ROUTE_116_MR_BRINEY)
	setflag(FLAG_BADGE01_GET)
	setflag(FLAG_BADGE02_GET)
	setflag(FLAG_BADGE03_GET)
	setflag(FLAG_BADGE04_GET)
	setflag(FLAG_BADGE05_GET)
	setflag(FLAG_BADGE06_GET)
	setflag(FLAG_BADGE07_GET)
	setflag(FLAG_BADGE08_GET)
	setflag(FLAG_VISITED_LITTLEROOT_TOWN)
	setflag(FLAG_VISITED_OLDALE_TOWN)
	setflag(FLAG_VISITED_DEWFORD_TOWN)
	setflag(FLAG_VISITED_LAVARIDGE_TOWN)
	setflag(FLAG_VISITED_FALLARBOR_TOWN)
	setflag(FLAG_VISITED_VERDANTURF_TOWN)
	setflag(FLAG_VISITED_PACIFIDLOG_TOWN)
	setflag(FLAG_VISITED_PETALBURG_CITY)
	setflag(FLAG_VISITED_SLATEPORT_CITY)
	setflag(FLAG_VISITED_MAUVILLE_CITY)
	setflag(FLAG_VISITED_RUSTBORO_CITY)
	setflag(FLAG_VISITED_FORTREE_CITY)
	setflag(FLAG_VISITED_LILYCOVE_CITY)
	setflag(FLAG_VISITED_MOSSDEEP_CITY)
	setflag(FLAG_VISITED_SOOTOPOLIS_CITY)
	setflag(FLAG_VISITED_EVER_GRANDE_CITY)
	setflag(FLAG_LANDMARK_POKEMON_LEAGUE)
	setflag(FLAG_LANDMARK_BATTLE_FRONTIER)
	clearflag(FLAG_HIDE_BRINEYS_HOUSE_MR_BRINEY)
	clearflag(FLAG_HIDE_BRINEYS_HOUSE_PEEKO)
	release
	end
}

script Debug_FlagsNotSetOverworldConfigMessage
{
	message(Debug_FlagsNotSetOverworldConfigMessage_Text)
	goto(Debug_MessageEnd)
}

text Debug_FlagsNotSetOverworldConfigMessage_Text
{
	format("Feature unavailable!\nPlease define a usable flag in:\l'include/config/overworld.h'!")
}

script Debug_FlagsNotSetBattleConfigMessage
{
	message(Debug_FlagsNotSetBattleConfigMessage_Text)
	goto(Debug_MessageEnd)
}

text Debug_FlagsNotSetBattleConfigMessage_Text
{
	format("Feature unavailable!\nPlease define a usable flag in:\l'include/config/battle.h'!")
}

script Debug_BoxFilledMessage
{
	message(Debug_BoxFilledMessage_Text)
	goto(Debug_MessageEnd)
}

text Debug_BoxFilledMessage_Text
{
	format("Storage boxes filled!")
}

script Debug_EventScript_CheckEVs
{
    lockall
    getpartysize
    goto_if_eq(VAR_RESULT,0,Debug_NoPokemon)
	special(ChoosePartyMon)
	waitstate
	goto_if_ge(VAR_0x8004, PARTY_SIZE, Debug_EventScript_CheckEVs_End)
	callnative(Script_GetChosenMonOffensiveEVs)
	msgbox(Debug_EventScript_Text_OffensiveEVs, MSGBOX_DEFAULT)
	callnative(Script_GetChosenMonDefensiveEVs)
	msgbox(Debug_EventScript_Text_DefensiveEVs, MSGBOX_DEFAULT)
    goto(Debug_EventScript_CheckEVs_End)
}

script Debug_EventScript_CheckEVs_End
{
	releaseall
}

script Debug_EventScript_CheckIVs
{
	lockall
	getpartysize
	goto_if_eq(VAR_RESULT, 0, Debug_NoPokemon)
	special(ChoosePartyMon)
	waitstate
	goto_if_ge(VAR_0x8004, PARTY_SIZE, Debug_EventScript_CheckIVs_End)
	callnative(Script_GetChosenMonOffensiveIVs)
	msgbox(Debug_EventScript_Text_OffensiveIVs, MSGBOX_DEFAULT)
	callnative(Script_GetChosenMonDefensiveIVs)
	msgbox(Debug_EventScript_Text_DefensiveIVs, MSGBOX_DEFAULT)
}

script Debug_EventScript_CheckIVs_End
{
	releaseall
	end
}

text Debug_EventScript_Text_OffensiveEVs
{
	format("ATK EVs: {STR_VAR_1}, SPATK EVs: {STR_VAR_2}, SPEED EVs: {STR_VAR_3}")
}

text Debug_EventScript_Text_DefensiveEVs
{
	format("HP EVs: {STR_VAR_1}, DEF EVs: {STR_VAR_2}, SPDEF EVs: {STR_VAR_3}")
}

text Debug_EventScript_Text_OffensiveIVs
{
	format("ATK IVs: {STR_VAR_1}, SPATK IVs: {STR_VAR_2}, SPEED IVs: {STR_VAR_3}")
}

text Debug_EventScript_Text_DefensiveIVs
{
	format("HP IVs: {STR_VAR_1}, DEF IVs: {STR_VAR_2}, SPDEF IVs: {STR_VAR_3}")
}

script Debug_EventScript_Script_1
{
	end
}

script Debug_EventScript_Script_2
{
	end
}

script Debug_EventScript_Script_3
{
	end
}

script Debug_EventScript_Script_4
{
	end
}

script Debug_EventScript_Script_5
{
	end
}

script Debug_EventScript_Script_6
{
	end
}

script Debug_EventScript_Script_7
{
	end
}

script Debug_EventScript_Script_8
{
	end
}

script Debug_EventScript_Script_9
{
	end
}

script Debug_EventScript_Script_10
{
	end
}

script Debug_CheckSaveBlock
{
	callnative(CheckSaveBlock1Size)
	msgbox(Debug_SaveBlock1Size, MSGBOX_DEFAULT)
	callnative(CheckSaveBlock2Size)
	msgbox(Debug_SaveBlock2Size, MSGBOX_DEFAULT)
	callnative(CheckSaveBlock3Size)
	msgbox(Debug_SaveBlock3Size, MSGBOX_DEFAULT)
	callnative(CheckPokemonStorageSize)
	msgbox(Debug_PokemonStorageSize, MSGBOX_DEFAULT)
	release
	end
}

text Debug_SaveBlock1Size
{
	format("SaveBlock1 size: {STR_VAR_1}b/{STR_VAR_2}b.\nFree space: {STR_VAR_3}b.")
}

text Debug_SaveBlock2Size
{
	format("SaveBlock2 size: {STR_VAR_1}b/{STR_VAR_2}b.\nFree space: {STR_VAR_3}b.")
}

text Debug_SaveBlock3Size
{
	format("SaveBlock3 size: {STR_VAR_1}b/{STR_VAR_2}b.\nFree space: {STR_VAR_3}b.")
}

text Debug_PokemonStorageSize
{
	format("{PKMN}Storage size: {STR_VAR_1}b/{STR_VAR_2}b.\nFree space: {STR_VAR_3}b.")
}

script Debug_CheckROMSpace
{
	callnative(CheckROMSize)
	msgbox(Debug_ROMSize, MSGBOX_DEFAULT)
	release
	end
}

text Debug_ROMSize
{
	format("ROM size: {STR_VAR_1}MB/32MB.\nFree space: {STR_VAR_2}MB.")
}

script Debug_HatchAnEgg
{
	lockall
	getpartysize
	goto_if_eq(VAR_RESULT, 0, Debug_NoPokemon)
	special(ChoosePartyMon)
	waitstate
	goto_if_ge(VAR_0x8004, PARTY_SIZE, Debug_HatchAnEgg_End)
	specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
	goto_if_ne(VAR_RESULT, SPECIES_EGG, DebugScript_HatchAnEgg_CantForceHatch)
	special(EggHatch)
	waitstate
}
script Debug_HatchAnEgg_End
{
	releaseall
	end
}

script Debug_NoPokemon
{
	msgbox(DebugScript_Text_EmptyParty, MSGBOX_DEFAULT)
	releaseall
	end
}

script DebugScript_HatchAnEgg_CantForceHatch
{
	msgbox(DebugScript_HatchAnEgg_Text_NotAnEgg, MSGBOX_DEFAULT)
	releaseall
	end
}

text DebugScript_Text_EmptyParty
{
	format("You have no Pokémon nor Eggs.")
}

text DebugScript_HatchAnEgg_Text_NotAnEgg
{
	format("That's not a Pokémon Egg.")
}

script DebugScript_ZeroDaycareMons
{
	msgbox(DebugText_DaycareNoPokemon, MSGBOX_DEFAULT)
	releaseall
	end
}

script DebugScript_OneDaycareMons
{
	msgbox(DebugText_DaycareOnePokemon, MSGBOX_DEFAULT)
	releaseall
	end
}

script DebugScript_DaycareMonsNotCompatible
{
	msgbox(DebugText_DaycarePokemonNotCompatible, MSGBOX_DEFAULT)
	releaseall
	end
}

text DebugText_DaycareNoPokemon
{
	format("You have no Pokémon at Daycare.")
}
text DebugText_DaycareOnePokemon
{
	format("You have only one Pokémon at Daycare.")
}
text DebugText_DaycarePokemonNotCompatible
{
	format("Your Pokémon at Daycare can't\nhave babies together!")
}
script Debug_ShowExpansionVersion
{
	callnative(BufferExpansionVersion)
	msgbox(Debug_ExpansionVersion, MSGBOX_DEFAULT)
	release
	end
}

text Debug_ExpansionVersion
{
	format("pokeemerald-expansion {STR_VAR_1}")
}

script Debug_EventScript_Steven_Multi
{
    call(MossdeepCity_SpaceCenter_2F_EventScript_ChoosePartyForMultiBattle)
    release
    end
}

script Debug_BerryPestsDisabled
{
	msgbox(DebugText_BerryPestsDisabled, MSGBOX_DEFAULT)
	release
	end
}

text DebugText_BerryPestsDisabled
{
	format("OW_BERRY_PESTS is disabled.\nUnable to force pests onto berry trees.")
}

script Debug_BerryWeedsDisabled
{
	msgbox(DebugText_BerryWeedsDisabled, MSGBOX_DEFAULT)
	release
	end
}

text DebugText_BerryWeedsDisabled
{
	format("OW_BERRY_WEEDS is disabled.\nUnable to force weeds onto berry trees.")
}

#endif

script Debug_EventScript_InflictStatus1
{
	lockall
	getpartysize
	goto_if_eq(VAR_RESULT, 0, Debug_NoPokemon)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Single, 0)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_PartyWide, 1)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Close, 2)
	dynmultistack(0, 0, FALSE, 3, FALSE, 0, NULL)
	switch(var(VAR_RESULT))
	{
	case 0: goto(Debug_EventScript_InflictStatus1_Single)
	case 1: goto(Debug_EventScript_InflictStatus1_Party)
	case 2: goto(Debug_EventScript_InflictStatus1_Close)
	goto(Debug_EventScript_InflictStatus1_Close)
	}
}

script Debug_EventScript_InflictStatus1_Close
{
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Single
{
	special(ChoosePartyMon)
	waitstate
	goto_if_ge(VAR_0x8004, PARTY_SIZE, Debug_EventScript_InflictStatus1_Close)
	specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
	goto_if_eq(VAR_RESULT, SPECIES_EGG, Debug_EventScript_InflictStatus1_Close)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Poison, 0)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Paralysis, 1)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Sleep, 2)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Burn, 3)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Freeze, 4)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Frostbite, 5)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Close, 6)
	dynmultistack(0, 0, FALSE, 7, FALSE, 0, NULL)
	switch(var(VAR_RESULT))
	{
	case 0: goto(Debug_EventScript_InflictStatus1_Single_Poison)
	case 1: goto(Debug_EventScript_InflictStatus1_Single_Paralysis)
	case 2: goto(Debug_EventScript_InflictStatus1_Single_Sleep)
	case 3: goto(Debug_EventScript_InflictStatus1_Single_Burn)
	case 4: goto(Debug_EventScript_InflictStatus1_Single_Freeze)
	case 5: goto(Debug_EventScript_InflictStatus1_Single_Frostbite)
	case 6: goto(Debug_EventScript_InflictStatus1_Close)
	case MULTI_B_PRESSED: goto(Debug_EventScript_InflictStatus1_Close)
	}
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Single_Poison
{
	setstatus1(STATUS1_POISON, VAR_0x8004)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Single_Paralysis
{
	setstatus1(STATUS1_PARALYSIS, VAR_0x8004)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Single_Sleep
{
	setstatus1(STATUS1_SLEEP, VAR_0x8004)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Single_Burn
{
	setstatus1(STATUS1_BURN, VAR_0x8004)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Single_Freeze
{
	setstatus1(STATUS1_FREEZE, VAR_0x8004)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Single_Frostbite
{
	setstatus1(STATUS1_FROSTBITE, VAR_0x8004)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Party
{
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Poison, 0)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Paralysis, 1)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Sleep, 2)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Burn, 3)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Freeze, 4)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Frostbite, 5)
	dynmultipush(Debug_EventScript_InflictStatus1_Text_Close, 6)
	dynmultistack(0, 0, FALSE, 7, FALSE, 0, NULL)
	switch(var(VAR_RESULT))
	{
	case 0: goto(Debug_EventScript_InflictStatus1_Party_Poison)
	case 1: goto(Debug_EventScript_InflictStatus1_Party_Paralysis)
	case 2: goto(Debug_EventScript_InflictStatus1_Party_Sleep)
	case 3: goto(Debug_EventScript_InflictStatus1_Party_Burn)
	case 4: goto(Debug_EventScript_InflictStatus1_Party_Freeze)
	case 5: goto(Debug_EventScript_InflictStatus1_Party_Frostbite)
	case 6: goto(Debug_EventScript_InflictStatus1_Close)
	case MULTI_B_PRESSED: goto(Debug_EventScript_InflictStatus1_Close)
	}
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Party_Poison
{
	setstatus1(STATUS1_POISON, PARTY_SIZE)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Party_Paralysis
{
	setstatus1(STATUS1_PARALYSIS, PARTY_SIZE)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Party_Sleep
{
	setstatus1(STATUS1_SLEEP, PARTY_SIZE)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Party_Burn
{
	setstatus1(STATUS1_BURN, PARTY_SIZE)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Party_Freeze
{
	setstatus1(STATUS1_FREEZE, PARTY_SIZE)
	releaseall
	end
}

script Debug_EventScript_InflictStatus1_Party_Frostbite
{
	setstatus1(STATUS1_FROSTBITE, PARTY_SIZE)
	releaseall
	end
}

text Debug_EventScript_InflictStatus1_Text_Single
{
    format("Single")
}

text Debug_EventScript_InflictStatus1_Text_PartyWide
{
    format("Party-wide")
}

text Debug_EventScript_InflictStatus1_Text_Close
{
    format("Close")
}

text Debug_EventScript_InflictStatus1_Text_Poison
{
    format("Poison")
}

text Debug_EventScript_InflictStatus1_Text_Paralysis
{
    format("Paralysis")
}

text Debug_EventScript_InflictStatus1_Text_Sleep
{
    format("Sleep")
}

text Debug_EventScript_InflictStatus1_Text_Burn
{
    format("Burn")
}

text Debug_EventScript_InflictStatus1_Text_Freeze
{
    format("Freeze")
}

text Debug_EventScript_InflictStatus1_Text_Frostbite
{
    format("Frostbite")
}

script Debug_EventScript_EWRAMCounters
{
    callnative(CheckEWRAMCounters)
    msgbox(Debug_EventScript_EWRAMCounters_Text,MSGBOX_DEFAULT)
    release
    end
}

text Debug_EventScript_EWRAMCounters_Text
{
    format("Follower Steps: {STR_VAR_1}.\nFishing Chain: {STR_VAR_2}.")
}

script Debug_PrintFontTest
{
    msgbox(Debug_EventScript_FontTest_Text_1, MSGBOX_DEFAULT)
    msgbox(Debug_EventScript_FontTest_Text_2, MSGBOX_DEFAULT)
    msgbox(Debug_EventScript_FontTest_Text_3, MSGBOX_DEFAULT)
    msgbox(Debug_EventScript_FontTest_Text_4, MSGBOX_DEFAULT)
    msgbox(Debug_EventScript_FontTest_Text_5, MSGBOX_DEFAULT)
    msgbox(Debug_EventScript_FontTest_Text_6, MSGBOX_DEFAULT)
    msgbox(Debug_EventScript_FontTest_Text_7, MSGBOX_DEFAULT)
    msgbox(Debug_EventScript_FontTest_Text_8, MSGBOX_DEFAULT)
    msgbox(Debug_EventScript_FontTest_Text_9, MSGBOX_DEFAULT)
    releaseall
    end
}


script Debug_EventScript_FontTest
{
    lockall
    goto(Debug_PrintFontTest)
    //   goto_if_eq VAR_RESULT, 0, Debug_NoPokemon
    //   dynmultipush Debug_EventScript_InflictStatus1_Text_Single, 0
    //   dynmultipush Debug_EventScript_InflictStatus1_Text_PartyWide, 1
    //   dynmultipush Debug_EventScript_InflictStatus1_Text_Close, 2
    //   dynmultistack 0, 0, FALSE, 3 FALSE, 0, NULL
    //   switch VAR_RESULT
    //   case 0, Debug_EventScript_InflictStatus1_Single
    //   case 1, Debug_EventScript_InflictStatus1_Party
    //   case 2, Debug_EventScript_InflictStatus1_Close
    //Debug_EventScript_InflictStatus1_Close:
    //   releaseall
    //   end
}

// Edit this to test your font
text Debug_EventScript_FontTest_Text_1
{
    format("{FONT_SMALL_NARROWER}Angel Adept Blind Bodice Clique\nCoast Dunce Docile Enact Eosin Furlong Focal Gnome Gondola Human Hoist Inlet Iodine Justin Jocose Knoll Koala Linden Loads Milliner Modal Number Nodule Onset Oddball Pneumo Poncho Quanta Qophs Rhone Roman Snout Sodium Tundra Tocsin Uncle Udder Vulcan Vocal Whale Woman Xmas Xenon Yunnan Young Zloty Zodiac.")
}

// Edit this to test your font
text Debug_EventScript_FontTest_Text_2
{
    format("{FONT_SMALL_NARROWER}Angel angel adept for the nuance loads\nof the arena cocoa and quaalude. Blind blind bodice for the submit oboe of the club snob and abbot. Clique clique coast for the pouch loco of the franc assoc and accede. Dunce dunce docile for the loudness mastodon of the loud statehood and huddle.")
}

// Edit this to test your font
text Debug_EventScript_FontTest_Text_3
{
    format("{FONT_SMALL_NARROWER}Enact enact eosin for the quench coed\nof the pique canoe and bleep. Furlong furlong focal for the genuflect profound of the motif aloof and offers. Gnome gnome gondola for the impugn logos of the unplug analog and smuggle. Human human hoist for the buddhist alcohol of the riyadh caliph and bathhouse.")
}

// Edit this to test your font
text Debug_EventScript_FontTest_Text_4
{
    format("{FONT_SMALL_NARROWER}Inlet inlet iodine for the quince\nchampion of the ennui scampi and shiite. Justin justin jocose for the djibouti sojourn of the oranj raj and hajjis. Knoll knoll koala for the banknote lookout of the dybbuk outlook and trekked. Linden linden loads for the ulna monolog of the consul menthol and shallot.")
}

// Edit this to test your font
text Debug_EventScript_FontTest_Text_5
{
    format("{FONT_SMALL_NARROWER}Milliner milliner modal for the alumna\nsolomon of the album custom and summon. Number number nodule for the unmade economic of the shotgun bison and tunnel. Onset onset oddball for the abandon podium of the antiquo tempo and moonlit. Pneumo pneumo poncho for the dauphin opossum of the holdup bishop and supplies.")
}

// Edit this to test your font
text Debug_EventScript_FontTest_Text_6
{
    format("{FONT_SMALL_NARROWER}Quanta quanta qophs for the inquest\nsheqel of the cinq coq and suqqu. Rhone rhone roman for the burnt porous of the lemur clamor and carrot. Snout snout sodium for the ensnare bosom of the genus pathos and missing. Tundra tundra tocsin for the nutmeg isotope of the peasant ingot and ottoman.")
}

// Edit this to test your font
text Debug_EventScript_FontTest_Text_7
{
    format("{FONT_SMALL_NARROWER}Uncle uncle udder for the dunes cloud\nof the hindu thou and continuum. Vulcan vulcan vocal for the alluvial ovoid of the yugoslav chekhov and revved. Whale whale woman for the meanwhile blowout of the forepaw meadow and glowworm. Xmas xmas xenon for the bauxite doxology of the tableaux equinox and exxon.")
}

// Edit this to test your font
text Debug_EventScript_FontTest_Text_8
{
    format("{FONT_SMALL_NARROWER}Yunnan yunnan young for the dynamo\ncoyote of the obloquy employ and sayyid. Zloty zloty zodiac for the gizmo ozone of the franz laissez and buzzing.")
}

// Special thanks to Nintendo for this nice pangram to test other glyphs
// Edit this to test your font

text Debug_EventScript_FontTest_Text_9
{
    format("{FONT_SMALL_NARROWER}42 × 138 = 5796.\nMr Jock, TV quiz PhD: bags 20% fewer lynx at a café; voilà, they're “worth” ♂1/♀1 = ¥1. That's 10 + 9 - 8 = 11 Nintendo GBA can connect to a Nintendo GameCube console! He claimed-though I don't believe him-to have done so in an eyes-shut state…?")
}

script Debug_EventScript_TellTheTime
{
    callnative(DebugMenu_CalculateTime)
    msgbox(Debug_EventScript_TellTheTime_Text_0, MSGBOX_DEFAULT)
    waitmessage
    closemessage
    end
}

script Debug_EventScript_PrintTimeOfDay
{
    callnative(DebugMenu_CalculateTimeOfDay)
    msgbox(DebugEventScript_PrintWeekday_Text_0, MSGBOX_DEFAULT)
    waitmessage
    closemessage
    end
}

script Debug_EventScript_FakeRTCNotEnabled
{
    msgbox(Debug_EventScript_FakeRTCNotEnabled_Text_0, MSGBOX_DEFAULT)
    waitmessage
    closemessage
    return
}

text Debug_EventScript_FakeRTCNotEnabled_Text_0
{
    format("You currently do not have Fake RTC\nenabled. Please enable it in include/\lconfig/overworld.h")
}

text Debug_EventScript_TellTheTime_Text_0
{
    format("Time and date:\n{STR_VAR_1}, {STR_VAR_2}:{STR_VAR_3}")
}

text DebugEventScript_PrintWeekday_Text_0
{
    format("Time of day: {STR_VAR_1}")
}

