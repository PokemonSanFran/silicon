#ifndef GUARD_GLASS_H
#define GUARD_GLASS_H

#include "gba/types.h"
#include "list_menu.h"
#include "constants/event_objects.h"
#include "constants/glass.h"
#include "main.h"

void Glass_ResetSaveData(void);
void SetTrainersDiscovered(void);
void Task_OpenGlassFromStartMenu(u8);
u32 Glass_OverworldReturnLocationStat(u32, u32);
u32 GetTrainerType(u32);
bool32 IsTrainerDiscovered(u32);
void SetTrainerDiscovered(u32);
void CB2_ReturnToTrainerScreen(void);
u32 GetOverworldSpriteFromTrainerId(enum ResidoTrainerIds);

enum GlassTrainerSortModes
{
    GLASS_SORT_LOCATION,
    GLASS_SORT_TRAINER,
    GLASS_SORT_COUNT,
};

enum GlassTrainerColumns
{
    GLASS_MON_1,
    GLASS_MON_2,
    GLASS_MON_3,
    GLASS_MON_4,
    GLASS_MON_5,
    GLASS_MON_6,
    GLASS_TRAINER_HEADER,
	GLASS_MARK_COLUMN,
    GLASS_TRAINER_COLUMN_COUNT,
};

enum GlassTrainerRows
{
    GLASS_ROW_1,
    GLASS_ROW_2,
    GLASS_ROW_3,
    GLASS_ROW_4,
    GLASS_TRAINER_MAX_SHOWED,
};

struct OnScreenRow
{
    u8 listPosition;
    u8 partySize;
    u8 spriteId[GLASS_TRAINER_COLUMN_COUNT];
};

enum trainerType
{
    GLASS_TRAINER_TYPE_REGULAR,
    GLASS_TRAINER_TYPE_GYM,
    GLASS_TRAINER_TYPE_BOSS,
    GLASS_TRAINER_TYPE_COUNT,
};

enum glassTrainerRematch
{
    GLASS_TRAINER_REMATCH_NO,
    GLASS_TRAINER_REMATCH_YES,
    GLASS_TRAINER_REMATCH_COUNT,
};

enum glassTrainerMarkHover
{
	GLASS_TRAINER_HOVER_NO,
	GLASS_TRAINER_HOVER_YES,
	GLASS_TRAINER_HOVER_COUNT,
};

enum glassTrainerStates
{
    GLASS_TRAINER_STATE_INCOMPLETE,
    GLASS_TRAINER_STATE_COMPLETE,
    GLASS_TRAINER_STATE_COUNT,
};

enum glassLocationSortModes
{
    GLASS_SORT_LOCATION_DEFAULT,
    GLASS_SORT_LOCATION_AZ,
    GLASS_SORT_LOCATION_DUMMY,
    GLASS_SORT_LOCATION_INCOMPLETE_FIRST,
    GLASS_SORT_LOCATION_COMPLETED_FIRST,
    GLASS_SORT_LOCATION_INCOMPLETE_FIRSTAZ,
    GLASS_SORT_LOCATION_COMPLETED_FIRSTAZ,
};

enum glassTrainerSortModes
{
    GLASS_SORT_TRAINER_DEFAULT,
    GLASS_SORT_TRAINER_AZ,
    GLASS_SORT_TRAINER_UNDISCOVERED_FIRST,
    GLASS_SORT_TRAINER_INCOMPLETE_FIRST,
    GLASS_SORT_TRAINER_COMPLETED_FIRST,
    GLASS_SORT_TRAINER_INCOMPLETE_FIRSTAZ,
    GLASS_SORT_TRAINER_COMPLETED_FIRSTAZ,
};

enum backgroundWindowTemplates
{
    BG0_GLASS_TEXT_CONTENT,
    BG1_GLASS_MAP_STATS_TRAINER_CURSOR,
    BG2_GLASS_LIST_BG,
    BG3_GLASS_BACKGROUND,
    BG_GLASS_COUNT,
};

enum glassWindowTemplates
{
    GLASS_WINDOW_HELP_BAR,
    GLASS_WINDOW_HEADER,
    GLASS_WINDOW_STATS,
    GLASS_WINDOW_LIST,
    GLASS_WINDOW_COUNT,
};

enum GlassSpriteTags
{
    GLASS_SPRITE_LOCATION_UP_ARROW,
    GLASS_SPRITE_LOCATION_DOWN_ARROW,
    GLASS_SPRITE_TRAINER_UP_ARROW,
    GLASS_SPRITE_TRAINER_DOWN_ARROW,
    GLASS_SPRITE_MAP_CURSOR,
	GLASS_SPRITE_TRAINER_CURSOR,
	GLASS_SPRITE_TRAINER_NAMEPLATE,
	GLASS_SPRITE_MON_CURSOR,
    NUM_GLASS_SPRITES,
};

enum InterfaceSpriteIds
{
	GLASS_UI_CHECK_MON_CURSOR,
	GLASS_UI_HOVER_MARK,
	GLASS_UI_NAMEPLATE,
	GLASS_UI_SPRITE_COUNT,
};

enum FontColors
{
    GLASS_FONT_COLOR_BLACK,
    GLASS_FONT_COLOR_WHITE,
    GLASS_FONT_COLOR_TRAINER_NAME,
    GLASS_SPRITE_TEXT_COLOR_TRANSPARENT = 6,
    GLASS_SPRITE_TEXT_COLOR_WHITE,
    GLASS_SPRITE_TEXT_COLOR_DARK_GRAY,
};

enum
{
    GLASS_ORIGINAL_ROW,
    GLASS_NEW_ROW,
};

enum
{
    GLASS_LOOP_MODE_DESTROY,
    GLASS_LOOP_MODE_CREATE,
    GLASS_LOOP_MODE_MOVE,
    GLASS_LOOP_MODE_COUNT,
};

enum
{
    GLASS_LIST_SORT_LOCATION_UNDISCOVERED,
    GLASS_LIST_SORT_LOCATION_VISIBLE,
    GLASS_LIST_SORT_LOCATION_CONQUERED,
};

#endif // GUARD_GLASS_H
